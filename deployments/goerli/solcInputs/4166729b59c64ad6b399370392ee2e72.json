{
  "language": "Solidity",
  "sources": {
    "contracts/ReviewMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nerror ReviewMe__NotOwner();\nerror ReviewMe__NotWhitelisted();\n\n// contract interface\ninterface WhitelistInterface {\n    function whitelist(address user) external returns (bool);\n}\n\ncontract ReviewMe {\n    address private immutable owner;\n    mapping(address => RatingProduct) private userToReview;\n    address[] private reviewers;\n    uint256 public amountOfReviews;\n\n    address WhitelistContractAddress =\n        0x30168B3f07E2A2ed0C65776F6E81311b590e91c0;\n    WhitelistInterface whitelistContract =\n        WhitelistInterface(WhitelistContractAddress);\n\n    struct RatingProduct {\n        string opinion;\n        uint8 starsNumber;\n        bool isReviewed;\n    }\n\n    modifier onlyOwner() {\n        if (msg.sender != owner) {\n            revert ReviewMe__NotOwner();\n        }\n        _;\n    }\n\n    modifier isWhitelisted() {\n        if (!whitelistContract.whitelist(msg.sender)) {\n            revert ReviewMe__NotWhitelisted();\n        }\n        _;\n    }\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    function setReview(\n        string memory _opinion,\n        uint8 _starsNumber\n    ) public isWhitelisted {\n        if (userToReview[msg.sender].isReviewed) {\n            revert(\"You have already added a review\");\n        }\n        userToReview[msg.sender].opinion = _opinion;\n        userToReview[msg.sender].starsNumber = _starsNumber;\n        userToReview[msg.sender].isReviewed = true;\n        reviewers.push(msg.sender);\n\n        amountOfReviews++;\n    }\n\n    function getReviewByIndex(\n        uint256 reviewIndex\n    ) public view returns (string memory, uint256) {\n        return (\n            userToReview[reviewers[reviewIndex]].opinion,\n            userToReview[reviewers[reviewIndex]].starsNumber\n        );\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}